name: Build → Verify Exchange → Deploy (CloudHub 2.0)

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  build-verify-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Ensure jq is available
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      # 1) PUBLISH to Exchange (your exact command)
      - name: Publish to Exchange (skip tests)
        run: |
          set -e
          mvn -B -ntp clean deploy -DskipTests

      # 2) Read project coordinates (GAV)
      - name: Read project coordinates (GAV)
        id: gav
        run: |
          set -e
          echo "groupId=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.groupId)" >> $GITHUB_OUTPUT
          echo "artifactId=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.artifactId)" >> $GITHUB_OUTPUT
          echo "version=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)" >> $GITHUB_OUTPUT

      # 3) Login to Anypoint & get Org Id
      - name: Get Anypoint access token & org id
        id: anypoint
        env:
          ANYPOINT_USERNAME: shyanypoint092625
          ANYPOINT_PASSWORD: Dingari007#
        run: |
          set -e
          TOKEN=$(curl -sS -X POST "https://anypoint.mulesoft.com/accounts/login" \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$ANYPOINT_USERNAME\",\"password\":\"$ANYPOINT_PASSWORD\"}" | jq -r '.access_token')
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to obtain Anypoint access token"; exit 1
          fi
          ORG_ID=$(curl -sS "https://anypoint.mulesoft.com/accounts/api/me" \
            -H "Authorization: Bearer $TOKEN" | jq -r '.user.organization.id // .user.memberOfOrganizations[0].id')
          if [ -z "$ORG_ID" ] || [ "$ORG_ID" = "null" ]; then
            echo "Failed to determine Organization ID"; exit 1
          fi
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
          echo "orgId=$ORG_ID" >> $GITHUB_OUTPUT

      # 4) Mandatory cool-down before verify (per your request)
      - name: Wait 60s for Exchange indexing
        run: sleep 60

      # 5) VERIFY the artifact exists in Exchange (gated)
      - name: Verify artifact exists in Exchange
        env:
          TOKEN: ${{ steps.anypoint.outputs.token }}
          ORG_ID: ${{ steps.anypoint.outputs.orgId }}
          GROUP_ID: ${{ steps.gav.outputs.groupId }}
          ARTIFACT_ID: ${{ steps.gav.outputs.artifactId }}
          VERSION: ${{ steps.gav.outputs.version }}
        run: |
          set -e
          echo "Verifying $GROUP_ID:$ARTIFACT_ID:$VERSION in Exchange (org: $ORG_ID)"
          # up to ~5 min total (20 * 15s) AFTER the initial 60s wait
          for i in $(seq 1 20); do
            RESP=$(curl -sS -H "Authorization: Bearer $TOKEN" \
              "https://anypoint.mulesoft.com/exchange/api/v2/assets?search=${ARTIFACT_ID}&organizationId=${ORG_ID}")

            FOUND=$(echo "$RESP" | jq --arg gid "$GROUP_ID" --arg aid "$ARTIFACT_ID" --arg ver "$VERSION" \
              '[
                 (.assets // .)[]? 
                 | select(.groupId==$gid and .assetId==$aid)
                 | ( .versions[]?.version? // .latestVersion? )
               ] | any(.==$ver)')
            if [ "$FOUND" = "true" ]; then
              echo "✅ Exchange contains $GROUP_ID:$ARTIFACT_ID:$VERSION"
              exit 0
            fi
            echo "Waiting for Exchange to index the artifact... ($i/20)"
            sleep 15
          done
          echo "❌ Artifact not visible in Exchange after waiting. Failing the job."
          echo "Last response:"
          echo "$RESP"
          exit 1

      # 6) DEPLOY to CloudHub 2.0 (your exact command)
      - name: Deploy to CloudHub 2.0
        run: |
          set -e
          mvn -B -ntp clean package mule:deploy -DmuleDeploy \
            -Danypoint.username='shyanypoint092625' \
            -Danypoint.password='Dingari007#' \
            -Danypoint.applicationName='sp-mule-demo-api-local' \
            -Danypoint.environment='Sandbox' \
            -Danypoint.target='Cloudhub-US-East-2'
